stages:
  - test
  - build
  - deploy

services:
  - postgres:14.2-bullseye

variables:
  POSTGRES_PASSWORD: test
  DATABASE_URL: postgresql://postgres:test@postgres:5432/postgres
  DJWTO_SIGNING_KEY: a058fd957fe86c22fd672668b6d717bc98f7852321ce62751d4b4fc0d7c5e2fb
  LYRA_TEST_HOST: "http://localhost:8000/trl"
  DEPLOYED_HOST: "https://deion.liu.gitlab.io/band-managing-app"

lyra-unit-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - cd lyra
    - pip install -r requirements.txt
    - python manage.py test

accounts-unit-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - cd accounts
    - pip install -r requirements.txt
    - python manage.py test

# lyra-unit-test-job:
#   image: python:3-bullseye
#   stage: test
#   needs:
#     - accounts-unit-test-job
#   script:
#     - cd lyra
#     - pip install -r requirements.txt
#     - python manage.py test

lint-job:
  image: python:3-bullseye
  stage: test
  script:
    - pip install flake8
    - flake8 lyra

build-front-end-job:
  stage: build
  image: node:lts-bullseye
  variables:
    PUBLIC_URL: https://deion.liu.gitlab.io/band-managing-app
    REACT_APP_ACCOUNTS_HOST: https://lyra-accounts-api.herokuapp.com
    REACT_APP_DJANGO_SERVICE: https://lyra-song-request-api.herokuapp.com/trl/
    # SEE BELOW HOW TO SET THIS
  # needs:
  # - lyra-unit-test-job
  # - accounts-unit-test-job
  script:
    - cd ghi
    - cd app
    - npm install
    - npm run build
    - cp build/index.html build/404.html
  artifacts:
    paths:
      - ghi/app/build/

pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - build-front-end-job
  needs:
    - build-front-end-job
  script:
    - mv ghi/app/build/ public
  artifacts:
    paths:
      - public

build-song-request-image-job:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - cd lyra
    - docker build -t ${CI_REGISTRY_IMAGE}/song_request:latest .
    - docker tag ${CI_REGISTRY_IMAGE}/song_request:latest ${CI_REGISTRY_IMAGE}/song_request:$CI_JOB_ID
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push ${CI_REGISTRY_IMAGE}/song_request:$CI_JOB_ID
    - docker push ${CI_REGISTRY_IMAGE}/song_request:latest

build-accounts-image-job:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - cd accounts
    - docker build -t ${CI_REGISTRY_IMAGE}/accounts:latest .
    - docker tag ${CI_REGISTRY_IMAGE}/accounts:latest ${CI_REGISTRY_IMAGE}/accounts:$CI_JOB_ID
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push ${CI_REGISTRY_IMAGE}/accounts:$CI_JOB_ID
    - docker push ${CI_REGISTRY_IMAGE}/accounts:latest

deploy-song-request-image-job:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: deploy
  image: docker:20.10.16
  needs:
    - build-song-request-image-job
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
    - docker pull ${CI_REGISTRY_IMAGE}/song_request:latest
    - docker tag ${CI_REGISTRY_IMAGE}/song_request:latest registry.heroku.com/$HEROKU_SONG_REQUEST_APP/web:latest
    - docker push registry.heroku.com/$HEROKU_SONG_REQUEST_APP/web:latest

deploy-accounts-image-job:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: deploy
  image: docker:20.10.16
  needs:
    - build-accounts-image-job
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
    - docker pull ${CI_REGISTRY_IMAGE}/accounts:latest
    - docker tag ${CI_REGISTRY_IMAGE}/accounts:latest registry.heroku.com/$HEROKU_ACCOUNTS_APP/web:latest
    - docker push registry.heroku.com/$HEROKU_ACCOUNTS_APP/web:latest

release-song-request-image-job:
  stage: deploy
  image: node:10.17-alpine
  needs:
    - deploy-song-request-image-job
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - apk add curl bash
    - curl https://cli-assets.heroku.com/install.sh | sh
  script:
    - heroku container:release web --app $HEROKU_SONG_REQUEST_APP

release-accounts-image-job:
  stage: deploy
  image: node:10.17-alpine
  needs:
    - deploy-accounts-image-job
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - apk add curl bash
    - curl https://cli-assets.heroku.com/install.sh | sh
  script:
    - heroku container:release web --app $HEROKU_ACCOUNTS_APP
